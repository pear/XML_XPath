XML_XPath Inteface TODO:
-----------------------------
[@]        = all done
[*]        = bug request/fix
---        = in progress
[?]        = not necessary
-----------------------------

 Status   Description
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  
  [@]     implement siblingNode and childNode to get a tag by name

  [@]     sort for results

  [@]     A more formal and informative interface to the load() function, used 'file/string/object'

  [@]     prevent duplicate root in appendChild()
  
  [@]     make an example.php and example.out for people to read through (Cooker)

  [@]     implement childNodes() to return an xml_xpath_result object

  [*]     make a short test harness just so I know I don't commit bad shit
  
  [*]     finally figured out substitute entities default, so see if we can make this
          usable in the class

  [*]     implement getElementsByTagName and getElementById since there are domxml functions
          now...return as getElementsByTagName as XML_XPath_result objects..getElementById
          will be a move function

  [*]     considering doing substringData for attribute nodes...just seems to make sense

  [*]     in _quick_evaluate_init, make sure the pointer is not null, could happen coming
          off of a results object

  [@]     functions for result object are now
          next()
          rewind()
          end()
          nextByNodeName()
          nextByNodeType()

  [@]     added getNodePath() to get the xpath location of the current node

  [@]     when using next() on XML_XPath_result, it counts the first node the first time, so
          it moves from off the stage to on the stage the first time, then it moves to the next
          node after that

  [@]     relative xpath queries

  [*]     fix this stdClass hack we have to do to get the result object to work with non xpath
          queries (in cases of using dom queries)
